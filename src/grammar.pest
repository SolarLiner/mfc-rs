//
// Created by intellij-pest on 2020-02-16
// grammar
// Author: solarliner
//

WHITESPACE = _{" " | "\t"}
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!"\n" ~ ANY)*) }

number = { ASCII_DIGIT+ }
ident = @{ ("_"|ASCII_ALPHA) ~ ("_"|ASCII_ALPHANUMERIC)*}
fun_call = { ident ~ "(" ~ (expr ~ ("," ~ expr)*)? ~ ")" }

check = _{ SOI ~ decls ~ EOI? }
root = _{ SOI ~ decls ~ EOI }
	decls = _{ decl ~ ("\n" ~ decl)* }
	decl = _{ extern_fun_decl | fun_decl }
    extern_fun_decl = { "extern" ~ "fun" ~ ident ~ "(" ~ (ident ~ ("," ~ ident)*)? ~ ")" }
    fun_decl = { "fun" ~ ident ~ "(" ~ (ident ~ ("," ~ ident)*)? ~ ")" ~ forced_block }
    forced_block = { "{" ~ "\n"? ~ stmts ~ "\n"? ~ "}" }
    	stmts = _{ (stmt ~ ("\n" ~ stmt)*)? }
	block = _{ forced_block | stmt }
	    stmt = { if_stmt | while_stmt | return_stmt | decl_stmt | assign_stmt | call_stmt }
		decl_stmt = { "var" ~ ident }
		assign_stmt = { ident ~ "=" ~ expr }
		while_stmt = {"while" ~ "(" ~ cond ~ ")" ~ block }
		if_stmt = { "if" ~ "(" ~ cond ~ ")" ~ block ~ ("else" ~ block)? }
		    cond = { catom ~ (cbinop ~ catom)* }
		        cbinop = { cand | cor | cle | clt | cge | cgt }
		        cand = {"and"}
		        cor = {"or"}
		        catom = _{ uatom | batom | "(" ~ cond ~ ")" }
		            batom = { expr ~ cmp ~ expr }
		            uatom = { ucmp ~ catom }
		            cmp = @{cle|clt|cge|cgt|ceq|cne}
		            ucmp = _{ unot }
		                unot = { "not" }
                    cle = {"<"}
                    clt = {"<="}
                    cge = {">="}
                    cgt = {">"}
                    cne = {"!="}
                    ceq = {"=="}
		call_stmt = _{ fun_call }
		return_stmt = { "return" ~ expr }
		expr = { atom ~ (binop ~ atom)* }
		    binop = _{badd|bsub|bmul}
			badd = {"+"}
			bsub = {"-"}
			bmul = {"*"}
		    atom = _{ fun_call | ident | number | "(" ~ expr ~ ")" }
